from abc import ABC, abstractmethod
from typing import List, Optional


class StorageSystem(ABC):
    @abstractmethod
    def connect(self) -> bool:
        pass

    @abstractmethod
    def list_files(self) -> List[str]:
        pass

    @abstractmethod
    def upload_file(self, file_path: str) -> bool:
        pass

    @abstractmethod
    def download_file(self, file_name: str, destination: str) -> bool:
        pass


class LocalStorage(StorageSystem):
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def connect(self) -> bool:
        print("üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É...")
        return True

    def list_files(self) -> List[str]:
        return ["document1.txt", "photo.jpg", "data.csv"]

    def upload_file(self, file_path: str) -> bool:
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {file_path} –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        return True

    def download_file(self, file_name: str, destination: str) -> bool:
        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª {file_name} –≤ {destination}")
        return True


class AmazonS3Storage(StorageSystem):
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def connect(self) -> bool:
        print("‚òÅÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Amazon S3...")
        return True

    def list_files(self) -> List[str]:
        return ["cloud_doc.txt", "backup.zip", "images.tar"]

    def upload_file(self, file_path: str) -> bool:
        print(f"‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {file_path} –≤ Amazon S3")
        return True

    def download_file(self, file_name: str, destination: str) -> bool:
        print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª {file_name} –∏–∑ Amazon S3 –≤ {destination}")
        return True

