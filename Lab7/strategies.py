from abc import ABC, abstractmethod
from models import DeliveryDetails


class DeliveryStrategy(ABC):

    @abstractmethod
    def calculate_cost(self, details: DeliveryDetails) -> float:
        pass

    @abstractmethod
    def get_estimated_time(self, details: DeliveryDetails) -> str:
        pass


class SelfPickupStrategy(DeliveryStrategy):

    def calculate_cost(self, details: DeliveryDetails) -> float:
        return 0.0  # –°–∞–º–æ–≤—ã–≤–æ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π! üéâ

    def get_estimated_time(self, details: DeliveryDetails) -> str:
        return "–ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞! ‚è∞"


class ExternalDeliveryStrategy(DeliveryStrategy):

    def calculate_cost(self, details: DeliveryDetails) -> float:
        base_cost = 100
        per_km_cost = 20
        express_multiplier = 1.5 if details.is_express else 1.0

        total = (base_cost + details.distance_km * per_km_cost) * express_multiplier
        return round(total, 2)

    def get_estimated_time(self, details: DeliveryDetails) -> str:
        if details.is_express:
            return "–î–æ—Å—Ç–∞–≤–∏–º –∑–∞ 30-60 –º–∏–Ω—É—Ç! üèÉüí®"
        return "–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–π–º–µ—Ç 1-2 —á–∞—Å–∞ üöó"


class OwnDeliveryStrategy(DeliveryStrategy):

    def calculate_cost(self, details: DeliveryDetails) -> float:
        base_cost = 80
        per_km_cost = 15
        weight_cost = details.weight_kg * 10
        express_multiplier = 1.7 if details.is_express else 1.0

        total = (base_cost + details.distance_km * per_km_cost + weight_cost) * express_multiplier
        return round(total, 2)

    def get_estimated_time(self, details: DeliveryDetails) -> str:
        if details.is_express:
            return "–î–æ—Å—Ç–∞–≤–∏–º –∑–∞ 45 –º–∏–Ω—É—Ç –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! ‚ö°"
        return "–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ —á–∞—Å–∞ üõµ"